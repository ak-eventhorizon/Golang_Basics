package main // определение пакета для текущего файла
import (
	"fmt"
	"sync"
)

// ********* Mutex *********
// Мьютексы позволяют разграничить доступ к общим ресурсам, гарантируя, что только одна горутина имеет к ним доступ в определенный момент времени
// Блок кода, находящийся между методами Lock() и Unlock() будет заблокирован для совместного использования несколькими горутинами

var mu sync.Mutex   // определяем мьютекс; по соглашению, защищаемые мьютексом переменные - объявляются сразу после объявления самого мьютекса
var counter int = 0 // общий ресурс, к которому будут обращаться несколько горутин (защищается мьютексом mu)

func main() {

	ch := make(chan bool) // канал для контроля завершения работы горутины

	for i := 1; i < 5; i++ {
		go work(i, ch, &mu)
	}

	// ожидаем завершения всех горутин (цикл по количеству горутин)
	for i := 1; i < 5; i++ {
		<-ch
	}

	fmt.Println("The End")
}

func work(number int, ch chan bool, mutex *sync.Mutex) {

	// блокируем доступ к блоку кода между Lock() и Unlock()
	// к последующему коду имеет доступ только та горутина, которая первая заблокивала мьютекс, остальные ждут его разблокировки
	// т.е. если горутина запустилась и пытается заблокировать мьютекс, который уже заблокирован - она будет ждать когда он освободится
	mutex.Lock()
	counter = 0
	for k := 1; k <= 5; k++ {
		counter++
		fmt.Println("Goroutine", number, "-", counter)
	}
	mutex.Unlock() // деблокируем доступ
	ch <- true     // отправляем в канал значение, сигнализируя, что горутина закончила работу
}
