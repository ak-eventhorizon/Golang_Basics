package main // определение пакета для текущего файла
import (
	"fmt"
)

// ********* Channels Stream *********
// Одна горутина транслирует другой через канал не одиночные значения, а некоторый поток данных.
// В этом случае общий алгоритм состоит в том, что горутина-отправитель в течение некоторого периода отправляет данные.
// Когда данные для отправки закончились, работа сделана, отправитель закрывает канал.

// Горутина-получатель в бесконечном цикле получает данные из канала.
// Если будет получен маркер закрытия канала, то осуществляется выход из бесконечного цикла.

func main() {

	intCh := make(chan int)

	go factorial(7, intCh)

	// бесконечный цикл с условием выхода
	for {
		num, opened := <-intCh // ожидание когда в канале появится значение и получение его
		if !opened {
			break // если поток закрыт, выход из цикла
		}
		fmt.Println(num)
	}

	// можно также использовать форму цикла for range
	// когда канал будет закрыт, то автоматически произойдет выход из цикла for
	for num := range intCh {
		fmt.Println(num)
	}
}

func factorial(n int, ch chan int) {
	defer close(ch)
	result := 1
	for i := 1; i <= n; i++ {
		result *= i
		ch <- result // помещение результата в канал и ожидание, когда получатель его заберет
	}
}
