package main // определение пакета для текущего файла
import (
	"fmt"
)

// ********* Printf *********
// Функция fmt.Printf() предоставляет возможности по форматированию строки с помощью спецификаторов. Каждый спецификатор представляет набор символов,
// которые интерпретируются определенным образом и предваряются знаком процента %. Каждый спецификатор представляет определенный тип данных.

type point struct {
	x int
	y int
}

func main() {

	fmt.Printf("bool: %t", 3 > 4) // %t: для вывода значений типа boolean (true или false)
	fmt.Println("")

	fmt.Printf("type: %T", "hello") // %T: для вывода типа значения
	fmt.Println("")

	fmt.Printf("char: %c", 33) // %c: для вывода символов, представленных числовым кодом
	fmt.Println("")

	fmt.Printf("bin: %b", 14) // %b: для вывода целых чисел в двоичной системе
	fmt.Println("")

	fmt.Printf("int: %d", 147) // %d: для вывода целых чисел в десятичной системе
	fmt.Println("")

	fmt.Printf("oct: %o", 147) // %d: для вывода целых чисел в восьмеричной системе
	fmt.Println("")

	fmt.Printf("hex: %x", 485) // %x: для вывода целых чисел в шестнадцатиричной системе, буквенные символы числа имеют нижний регистр a-f
	fmt.Println("")

	fmt.Printf("HEX: %X", 485) // %X: для вывода целых чисел в шестнадцатиричной системе, буквенные символы числа имеют верхний регистр A-F
	fmt.Println("")

	fmt.Printf("str1: %s", "string") // %s: для вывода строки
	fmt.Println("")

	fmt.Printf("str2: %q", "string") // %q: для вывода символов в кавычках
	fmt.Println("")

	fmt.Printf("str3: %x", "это") // %x: для вывода шестнадцатеричного кода символов строки
	fmt.Println("")

	fmt.Printf("uncd: %U", 'A') // %U: для вывода символов в формате кодов Unicode (U+0041)
	fmt.Println("")

	fmt.Printf("flt1: %f", 78.9) // %f: для вывода чисел с плавающей точкой, точность и ширина значения по умолчанию (78.900000)
	fmt.Println("")

	fmt.Printf("flt2: %11f", 78.9) // %f: для вывода чисел с плавающей точкой, ширина - 11 символов и точность по умолчанию (  78.900000)
	fmt.Println("")

	fmt.Printf("flt3: %.2f", 78.9) // %f: для вывода чисел с плавающей точкой, ширина по умолчанию и точность - 2 символа (78.90)
	fmt.Println("")

	fmt.Printf("flt4: %9.2f", 78.9) // %f: для вывода чисел с плавающей точкой, ширина - 9 и точность - 2 (    78.90)
	fmt.Println("")

	fmt.Printf("flt5: %9.f", 78.9) // %f: для вывода чисел с плавающей точкой, ширина - 9 и точность - 0 (       79)
	fmt.Println("")

	fmt.Printf("flt6: %F", 78.9) // %F: то же самое, что и %f
	fmt.Println("")

	fmt.Printf("exp1: %e", 123400000.0) // %e: для вывода чисел с плавающей точкой в экспоненциальном представлении, например, -1.234456e+78
	fmt.Println("")

	fmt.Printf("exp2: %E", 123400000.0) // %E: для вывода чисел с плавающей точкой в экспоненциальном представлении, например, -1.234456E+78
	fmt.Println("")

	fmt.Printf("exp3: %g", 123400000.1) // %g: для длинных чисел с плаващей точкой используется %e, для других - %f
	fmt.Println("")

	fmt.Printf("exp4: %G", 1234.1) // %G: для длинных чисел с плаващей точкой используется %E, для других - %F
	fmt.Println("")

	p := point{1, 2}

	fmt.Printf("pointer: %p", &p) // %p: для вывода значения указателя - адреса в шестнадцатеричном представлении
	fmt.Println("")

	// %v - универсальный спецификатор:
	fmt.Printf("universal1: %v", 3 > 4) // %v: для типа boolean аналогичен %t
	fmt.Println("")
	fmt.Printf("universal2: %v", 34) // %v: для целочисленных типов аналогичен %d
	fmt.Println("")
	fmt.Printf("universal3: %v", 3.4) // %v: для чисел с плавающей точкой аналогичен %g
	fmt.Println("")
	fmt.Printf("universal4: %v", "abc") // %v: для строк аналогичен %s
	fmt.Println("")
	fmt.Printf("struct1: %v", p) // %v: для структуры - экземпляр структуры -- {1 2}
	fmt.Println("")
	fmt.Printf("struct2: %+v", p) // %+v: для структуры - экземпляр структуры с именами полей -- {x:1 y:2}
	fmt.Println("")
	fmt.Printf("struct3: %#v", p) // %#v: для структуры - исходный код сниппета, который порождает значение -- main.point{x:1, y:2}
	fmt.Println("")

	// форматирование по ширине и точности
	fmt.Printf("width1: |%6d|%6d|", 12, 345)
	fmt.Println("")
	fmt.Printf("width2: |%6.2f|%6.2f|", 1.2, 3.45)
	fmt.Println("")
	fmt.Printf("width3: |%-6.2f|%-6.2f|", 1.2, 3.45)
	fmt.Println("")
	fmt.Printf("width4: |%6s|%6s|", "foo", "b")
	fmt.Println("")
	fmt.Printf("width5: |%-6s|%-6s|", "foo", "b")
	fmt.Println("")
}
